{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa072cce",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. create a function that printing out a board with list\n",
    "from IPython.display import clear_output\n",
    "\n",
    "def display_board(board):\n",
    "    #printout idnex position of the list\n",
    "    clear_output()\n",
    "    print(board[7]+ 'I' + board[8] + 'I' + board[9])\n",
    "    print(board[4]+ 'I' + board[5] + 'I' + board[6])\n",
    "    print(board[1]+ 'I' + board[2]+ 'I' + board[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "813b1e05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XIOIX\n",
      "OIXIO\n",
      "XIOIX\n"
     ]
    }
   ],
   "source": [
    "#run your function on a test version of the board\n",
    "test_board = ['#','X','O','X','O','X','O','X','O','X']\n",
    "display_board(test_board)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5213e38b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2.write a function that can take in a player input and assign their market as X or O\n",
    "\n",
    "def player_input():\n",
    "    marker = ''\n",
    "        #keep asking player 1 to choose x or o\n",
    "    while not (marker == 'X' or marker == 'O'):\n",
    "        marker = input('Player 1: Do you want to be X or O? ').upper()\n",
    "            #assign player 2, the opposite ,marker\n",
    "    if marker == 'X':\n",
    "        return ('X', 'O')\n",
    "    else:\n",
    "        return ('O', 'X')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4461a6fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#run the function to make sure it returns the desird output\n",
    "player_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "483d742d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3.write a function that takes in the board list object like XO, and number 1-9 and assigns it to the board\n",
    "def place_marker(board, marker, position):\n",
    "    board[position] = marker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b531db69",
   "metadata": {},
   "outputs": [],
   "source": [
    "place_marker(test_board,'$',8)\n",
    "display_board(test_board)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94618ce4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4.write a functin that takes in baord and checks to see if some has won\n",
    "def win_check(board,mark):\n",
    "    #what does it mean to win?\n",
    "    \n",
    "    #all rows, and check to see if they all shre the same market?\n",
    "    board[1] == mark and board [2] ==mark and board [3] or #check if the postion board is equal to the mark. if everyone == mark in a row then the player won\n",
    "    (board[4] == mark and board[5] == mark and board[6] == mark) or # across the bottom\n",
    "    (board[7] == mark and board[4] == mark and board[1] == mark) or # down the middle\n",
    "    (board[8] == mark and board[5] == mark and board[2] == mark) or # down the middle\n",
    "    (board[9] == mark and board[6] == mark and board[3] == mark) or # down the right side\n",
    "    (board[7] == mark and board[5] == mark and board[3] == mark) or # diagonal\n",
    "    (board[9] == mark and board[5] == mark and board[1] == mark)) # diagonal\n",
    "    #all colums, check to see if marker matches\n",
    "    \n",
    "    #2 diagonals, check to see match"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "339a33e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "display_board(test_board)\n",
    "win_check(test_board, \"X\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6e59746",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5.write a function that uses the randome mdule to randomly decide which player goes first\n",
    "import random\n",
    "\n",
    "def choose_first():\n",
    "    flip = random.randint(0,1)\n",
    "    \n",
    "    if flip == 0:\n",
    "        return 'Player 1'\n",
    "    else:\n",
    "        return 'Player 2'\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a45c251",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6. write a functin that returns a boolean indicating whether a space on the board freely available\n",
    "def space_check(board, position):\n",
    "    \n",
    "    board[position] == ' '"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fd8d0fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7. write a function that checks if the board is full and retrns a boolean value. True if full, false otherwiese\n",
    "def full_board_check(board):\n",
    "    for i in range(1,10):\n",
    "        if space_check(board, i):\n",
    "            return False\n",
    "        #i if i have a space, that means by board is not full, that means false\n",
    "    return True\n",
    "#board is full if we return true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dffa2db",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8. a functin for next position from the player\n",
    "def player_choice(board):\n",
    "    \n",
    "    position = 0\n",
    "    \n",
    "    while position not in (1,2,3,4,5,6,7,8,9) or not space_check(board, position):\n",
    "        position = int(input('Choose a position: (1-9)'))\n",
    "    return position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6357440",
   "metadata": {},
   "outputs": [],
   "source": [
    "def replay(): \n",
    "    choice = input(\"play again? enter yes or no\")\n",
    "    \n",
    "    return choice =='yes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a838bcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10. logic stuff\n",
    "#need while loop tp keep running the game\n",
    "print('WC to TIC TACT TOE')\n",
    "\n",
    "while True:\n",
    "#play the game\n",
    "    \n",
    "    ##set everything up (baord, whose first, choose markers)\n",
    "    the_board= ['']*10\n",
    "    player1_marker,player2_marker = player_input\n",
    "    \n",
    "    turn = choose_first()\n",
    "    print(turn + \"will go first\")\n",
    "    \n",
    "    play_game = input(\"ready to play? yes or no?\")\n",
    "    \n",
    "    if play_game =='yes':\n",
    "        game_on = True\n",
    "    else:\n",
    "        game_on = False\n",
    "    ##game play\n",
    "    while game_on:\n",
    "        if turn == \"player 1\":\n",
    "            #show the board\n",
    "            display_board(the_board)\n",
    "            #choose a position\n",
    "            position = player_choice(the_board)\n",
    "            #place the market on the position\n",
    "            place_marker(the_board, player1_market, position)\n",
    "            #check if they won\n",
    "            if win_check(the_board, player1_marker):\n",
    "                display_board(the board)\n",
    "                print('PLAYER 1 HAS WON!')\n",
    "                game_on  False\n",
    "            #or check if there is a tie\n",
    "            else:\n",
    "                 if full_board_check(the_board):\n",
    "                    display_board(the_board)\n",
    "                    print('Tie Game')\n",
    "                    game_on= False\n",
    "                else:\n",
    "                    turn = 'Player 2'\n",
    "\n",
    "            #no tie and no wine? THen next player's turn\n",
    "    ###player one turn\n",
    "    \n",
    "    ###player two turn\n",
    "    #break. out of the while loop on replay()\n",
    "    if not replay():\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f4dde99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
